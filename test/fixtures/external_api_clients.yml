test:
  api_namespace: two
  slug: test-second
  label: Test API 2
  enabled: true
  metadata: {
              "api_key": "x-api-key-foo",
              "bearer_token": "foo"
            }
  model_definition: |
    class ExternalApiModelExample
      def initialize(parameters)  
        # do init stuff
      end
      def start
        return true
      end

      def log
        return true
      end
    end
    # at the end of the file we have to implicitly return the class 
    ExternalApiModelExample
open_json_server:
  api_namespace: two
  slug: test-second
  label: Test API 2
  enabled: true
  metadata:  {
                "api_key": "x-api-key-foo",
                "bearer_token": "foo"
              }
  model_definition: |
    class OpenJsonServer
      def initialize(parameters)  
        @external_api_client = parameters[:external_api_client]
        @base_url = "https://jsonplaceholder.typicode.com/todos/1"
      end
      def start
        response = HTTParty.get(@base_url).body
        @external_api_client.api_namespace.api_resources.create(
          properties: JSON.parse(response).deep_symbolize_keys
        )
      end

      def log
        return true
      end
    end
    # at the end of the file we have to implicitly return the class 
    OpenJsonServer
webhook_drive_strategy:
  api_namespace: two
  slug: test-webhook-drive-strategy
  label: Test Webhook Drive Strategy
  enabled: true
  metadata: {}
  drive_strategy: 'webhook'
  model_definition: |
    class ExternalApiModelExample
      def initialize(parameters)
        @external_api_client = parameters[:external_api_client]
        @payload = parameters[:request]&.request_parameters
      end
  
      def start
        if @payload['type'] == 'customer.created'
          @external_api_client.api_namespace.api_resources.create(
            properties: {
              request_body: @payload
            }
          )
          render json: { success: true }
        end
      end

      def log
        return true
      end
    end
    
    ExternalApiModelExample

# Specific plugins are moved to its separate files.
<%= IO.read(Rails.root.join "test/plugin_fixtures/billables_report_plugin.yml") %>
<%= IO.read(Rails.root.join "test/plugin_fixtures/bishop_monitoring.yml") %>
<%= IO.read(Rails.root.join "test/plugin_fixtures/bishop_tls_monitoring.yml") %>
<%= IO.read(Rails.root.join "test/plugin_fixtures/compliance_visitor_data_request_plugin.yml") %>
<%= IO.read(Rails.root.join "test/plugin_fixtures/sync_attribute_to_api_namespace.yml") %>
<%= IO.read(Rails.root.join "test/plugin_fixtures/sync_to_mailchimp.yml") %>
<%= IO.read(Rails.root.join "test/plugin_fixtures/transcript_parser_plugin.yml") %>
<%= IO.read(Rails.root.join "test/plugin_fixtures/unique_string_aggregator_plugin.yml") %>
<%= IO.read(Rails.root.join "test/plugin_fixtures/vacuum_job.yml") %>
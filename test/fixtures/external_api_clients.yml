
test:
  api_namespace: two
  slug: test-second
  label: Test API 2
  enabled: true
  metadata: {
              "api_key": "x-api-key-foo",
              "bearer_token": "foo"
            }
  model_definition: |
    class ExternalApiModelExample
      def initialize(parameters)  
        # do init stuff
      end
      def start
        return true
      end

      def log
        return true
      end
    end
    # at the end of the file we have to implicitly return the class 
    ExternalApiModelExample
open_json_server:
  api_namespace: two
  slug: test-second
  label: Test API 2
  enabled: true
  metadata:  {
                "api_key": "x-api-key-foo",
                "bearer_token": "foo"
              }
  model_definition: |
    class OpenJsonServer
      def initialize(parameters)  
        @external_api_client = parameters[:external_api_client]
        @base_url = "https://jsonplaceholder.typicode.com/todos/1"
      end
      def start
        response = HTTParty.get(@base_url).body
        @external_api_client.api_namespace.api_resources.create(
          properties: JSON.parse(response).deep_symbolize_keys
        )
      end

      def log
        return true
      end
    end
    # at the end of the file we have to implicitly return the class 
    OpenJsonServer
bishop_monitoring:
  api_namespace: monitoring_targets
  slug: bishop-monitoring
  label: Bishop Monitoring in a box
  enabled: true
  metadata: {}
  model_definition: |
    class BishopMonitoring
      def initialize(parameters)  
        @external_api_client = parameters[:external_api_client]
        @log_incidents_to_namespace = @external_api_client.api_namespace.properties["log_incidents_to"]
        @targets = @external_api_client.api_namespace.api_resources
        @timeout_in_seconds = 30
      end
      def start
        logger_namespace = ApiNamespace.find_by!(slug: @log_incidents_to_namespace)
        @targets.each do |target|
          url = target.properties["url"]
          start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
          latency = 0
          begin
            response = HTTParty.get(url, follow_redirects: true, timeout: @timeout_in_seconds)
            case response.code 
              when 500..600
                raise StandardError.new "server returned #{response.code}"
            end


            finish = Process.clock_gettime(Process::CLOCK_MONOTONIC)
            latency = ((finish - start) * 1000).round
          rescue StandardError => e
            logger_namespace.api_resources.create!(
              properties: {
                slug: url,
                error: e.message,
                notification_sent: false,
                latency: latency
              }
            )
            updated_target_properties = {
              "healthy": false,
              "alarm_raised": false,
              "last_checked_at": Time.now,
              "latency": 0,
              "error_message": e.message
            }
            target.update!(
              properties: target.properties.merge(updated_target_properties)
            )
            #after handling the error case, we need to bubble it up to the job
            raise
          else
            updated_target_properties = {
              "healthy": true,
              "alarm_raised": false,
              "last_checked_at": Time.now,
              "latency": latency,
              "error_message": nil
            }
            target.update!(
              properties: target.properties.merge(updated_target_properties)
            )
          end
        end
      end

      def log
        return true
      end
    end
    # at the end of the file we have to implicitly return the class 
    BishopMonitoring
bishop_tls_monitoring:
  api_namespace: monitoring_targets
  slug: bishop-tls-monitoring
  label: TLS monitoring in a box
  enabled: true
  metadata: {}
  model_definition: |
    class BishopTlsMonitoring
      def initialize(parameters)  
        @external_api_client = parameters[:external_api_client]
        @log_incidents_to_namespace = @external_api_client.api_namespace.properties["log_incidents_to"]
        @targets = @external_api_client.api_namespace.api_resources
        @timeout_in_seconds = 30
      end
      def start
        logger_namespace = ApiNamespace.find_by!(slug: @log_incidents_to_namespace)
        @targets.each do |target|
          url = target.properties["url"]
          start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
          latency = 0
          begin
            uri = URI::HTTPS.build(host: URI(url).host)
            response = Net::HTTP.start(uri.host, uri.port, :use_ssl => true)
            cert = response.peer_cert
            two_weeks = 14 * 86400 # 14 * One Day
            if Time.now + two_weeks > cert.not_after
              raise "TLS/SSL certificate for #{uri} is expiring soon. Expiry at: #{cert.not_after}"
            end
            finish = Process.clock_gettime(Process::CLOCK_MONOTONIC)
            latency = ((finish - start) * 1000).round
          rescue StandardError => e
            logger_namespace.api_resources.create!(
              properties: {
                slug: url,
                error: e.message,
                notification_sent: false,
                latency: latency
              }
            )
            updated_target_properties = {
              "healthy": false,
              "alarm_raised": false,
              "last_checked_at": Time.now,
              "latency": 0,
              "error_message": e.message
            }
            target.update!(
              properties: target.properties.merge(updated_target_properties)
            )
            #after handling the error case, we need to bubble it up to the job
            raise
          else
            updated_target_properties = {
              "healthy": true,
              "alarm_raised": false,
              "last_checked_at": Time.now,
              "latency": latency,
              "error_message": nil
            }
            target.update!(
              properties: target.properties.merge(updated_target_properties)
            )
          end
        end
      end

      def log
        return true
      end
    end
    # at the end of the file we have to implicitly return the class 
    BishopTlsMonitoring
vacuum_job:
  api_namespace: one
  slug: vacuum-job
  label: VacuumJob
  enabled: true
  metadata: {
            'ORDER': 'descending',
            'DIMENSION': 'created_at',
            'BATCH_SIZE': '5',
            'API_NAMESPACE_ID': '1',
            'OLDER_THAN': '2880' # 2 days (in minutes)
          }
  model_definition: |
    class VacuumJob
      def initialize(parameters)  
        @external_api_client = parameters[:external_api_client]
      end

      def start
        # Fetching provided inputs (namespaceid, batch_size, dimension, order, time_before)
        api_namespace_id = @external_api_client.metadata["API_NAMESPACE_ID"]
        batch_size = @external_api_client.metadata["BATCH_SIZE"]
        dimension = @external_api_client.metadata["DIMENSION"]
        order = @external_api_client.metadata["ORDER"].upcase.starts_with?('ASC') ? 'ASC' : 'DESC'
        older_than = @external_api_client.metadata["OLDER_THAN"].to_f # in minutes

        raise 'ApiResource of another ApiNamespace cannot be deleted.'if api_namespace_id.to_s != @external_api_client.api_namespace_id.to_s

        api_resources_to_be_deleted = ApiResource.where(api_namespace_id: api_namespace_id).where("(EXTRACT (EPOCH FROM  now() - #{dimension} )::int/60) > ?", older_than).order("#{dimension} #{order}").limit(batch_size)

        ActiveRecord::Base.transaction do
          api_resources_to_be_deleted.each do |api_resource|
            api_resource.destroy!
          end
        end
      end
    end
    # at the end of the file we have to implicitly return the class 
    VacuumJob

mailchimp_plugin:
  api_namespace: mailchimp
  slug: mailchimp-plugin
  label: MailChimp
  enabled: true
  metadata: {
            'API_KEY': 'testkey',
            'SERVER_PREFIX': 'us9',
            'LIST_ID': 'valid_list_id',
          }
  model_definition: |
    class SyncToMailchimp
      def initialize(parameters)
        @external_api_client     = parameters[:external_api_client]
        @api_key                 = @external_api_client.metadata["API_KEY"]
        @unsynced_api_resources  = @external_api_client.api_namespace.api_resources.where("properties @> ?", {synced_to_mailchimp: false}.to_json)
        @mailchimp_uri           = "https://#{@external_api_client.metadata['SERVER_PREFIX']}.api.mailchimp.com/3.0/lists/#{@external_api_client.metadata['LIST_ID']}/members?skip_merge_validation=true"
        @custom_merge_fields_map = @external_api_client.metadata['CUSTOM_MERGE_FIELDS_MAP'] || {}
        @attr_to_exclude         = (@external_api_client.metadata['ATTR_TO_EXCLUDE'] || []) + @custom_merge_fields_map.keys + ['synced_to_mailchimp']
        @logger_namespace        = ApiNamespace.find_by(slug: @external_api_client.metadata["LOGGER_NAMESPACE"]) if @external_api_client.metadata["LOGGER_NAMESPACE"]
      end
      
      def start
        @unsynced_api_resources.each do |api_resource|
          begin
            merge_fields = api_resource.properties.except(*@attr_to_exclude).transform_keys(&:upcase).transform_values(&:to_s)

            @custom_merge_fields_map.each do |key, value|
              merge_fields[value.upcase] = api_resource.properties[key].to_s if value
            end

            response = HTTParty.post(@mailchimp_uri, 
              body: { 
                  email_address: api_resource.properties["email"],
                  status: "subscribed",
                  merge_fields: merge_fields,
                  tags: @external_api_client.metadata['TAGS'] || []
                }.to_json,

              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': "Basic #{@api_key}" 
                } 
              )

            if response.success?
              api_resource.properties["synced_to_mailchimp"] = true
              api_resource.save
            end

            @logger_namespace.api_resources.create!(
              properties: {
                api_resource: api_resource.id,
                status: response.success? ? "success" : "error",
                response: JSON.parse(response.body),
                timestamp: Time.zone.now
              }
            ) if @logger_namespace

          rescue StandardError => e
            @logger_namespace.api_resources.create!(
              properties: {
                api_resource: api_resource.id,
                status: "error",
                response: { detail: e.message},
                timestamp: Time.zone.now
              }
            ) if @logger_namespace
          end
        end
      end
    end

    # at the end of the file we have to implicitly return the class 
    SyncToMailchimp

sync_attribute_to_api_namespace_plugin:
  api_namespace: one
  slug: sync-attribute-to-api-namespace
  label: SyncAttributeToApiNamespace
  enabled: true
  metadata: {
            'ATTRIBUTE_NAME': 'test_attribute',
            'DEFAULT_VALUE': 'test_value',
          }
  model_definition: |
    class SyncAttributeToApiNamespace
      def initialize(parameters)  
        @external_api_client = parameters[:external_api_client]
        @api_namespace = @external_api_client.api_namespace
        @api_form = @api_namespace.api_form
      end

      def start
        # Fetching provided inputs (attribute_name, default_value)
        attribute_name = @external_api_client.metadata["ATTRIBUTE_NAME"]
        default_value = @external_api_client.metadata["DEFAULT_VALUE"].nil? ? '' : @external_api_client.metadata["DEFAULT_VALUE"]

        raise 'ATTRIBUTE_NAME is missing!' if attribute_name.nil?
        raise 'The provided attribute is already defined in the ApiNamespace' if @api_namespace.properties.keys.include?(attribute_name)

        # Adding the new-attribute in ApiNamespace
        new_properties = @api_namespace.properties.merge(attribute_name => default_value)
        @api_namespace.has_form = @api_namespace.api_form.present? ? '1' : '0'
        @api_namespace.update!(properties: new_properties)

        # Making the new-attribute non-renderable
        form_properties = @api_form.properties
        form_properties[attribute_name]['renderable'] = '0'
        @api_form.update!(properties: form_properties)

        # Adding the new-attribute to its ApiResources
        @api_namespace.api_resources.find_in_batches(batch_size: 500).each do |resources_batch|
          resources_batch.each do |api_resource|
            # Does not mutate the api-resource if it already has the provided new-attribute
            next if api_resource.properties.keys.include?(attribute_name)

            new_resource_properties = api_resource.properties.merge(attribute_name => default_value)
            api_resource.update!(properties: new_resource_properties)
          end
        end
      end
    end
    # at the end of the file we have to implicitly return the class 
    SyncAttributeToApiNamespace
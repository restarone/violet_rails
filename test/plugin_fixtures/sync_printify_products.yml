sync_printify_products:
  api_namespace: products
  slug: sync_printify_products
  label: sync_printify_products
  enabled: true
  drive_strategy: on_demand
  metadata: {
              'LOGGER_NAMESPACE': 'shop_logs'
            }
  model_definition: |
                    class SyncPrintifyProducts
                      def initialize(parameters)
                        @external_api_client = parameters[:external_api_client]
                        @logger_namespace = ApiNamespace.find_by(slug: @external_api_client.metadata["LOGGER_NAMESPACE"]) if @external_api_client.metadata["LOGGER_NAMESPACE"]
                      end
                    
                      def start
                        ApiNamespace.friendly.find('shops').api_resources.each do |shop|
                          printify_request_headers = {
                                              "Content-Type" => 'application/json;charset=utf-8',
                                              "Authorization" => "Bearer #{shop.printify_account.properties['api_key']}" 
                                            }
                          product_response = HTTParty.get("https://api.printify.com/v1/shops/#{shop.properties['printify_shop_id']}/products.json", headers: printify_request_headers)
                      
                          log_error(product_response.body, { shop_id: shop.id }) && return unless product_response.success?
                      
                          printify_product_list = JSON.parse(product_response.body)['data']
                          violet_products = shop.products
                      
                          to_delete = violet_products.pluck(:properties).pluck('printify_product_id') - printify_product_list.pluck('id')
                      
                          violet_products.jsonb_search(:properties, { printify_product_id: { value: to_delete, option: 'PARTIAL', match: 'ANY' }}).map(&:destroy) if to_delete.present?
                      
                          printify_product_list.each do |product_object|
                            product = violet_products.jsonb_search(:properties, { printify_product_id: product_object['id'] }).first_or_initialize
                            enabled_variants = product_object['variants'].filter { |variant| variant['is_enabled'] }
                            enabled_options_map = enabled_variants.map {|variant| variant['options']}
                            enabled_options_ids = enabled_options_map.flatten.uniq 
                            enabled_options = product_object['options'].map do |option|
                              option['values'] = option['values'].filter { |value| enabled_options_ids.include?(value['id']) }
                              option
                            end

                            enabled_options.each do |option|
                              option['values'].each do |value| 
                                value['available_options'] = enabled_options_map.select { |opt| opt.include?(value['id']) }.flatten.uniq.excluding(value['id'])
                              end
                            end

                            default_variant = enabled_variants.find { |variant| variant['is_default'] } || enabled_variants.first
                            default_image = product_object['images'].find { |image| image['is_default'] && image['variant_ids'].include?(default_variant['id']) } || product_object['images'].find { |image| image['is_default'] } || product_object['images'].first

                            categories = shop.properties['product_categories'] & product_object['tags']
                            sub_categories = shop.properties['product_sub_categories'] & product_object['tags']
                            product.properties = {
                              printify_product_id: product_object['id'],
                              title: product_object['title'],
                              description: product_object['description'],
                              tags: product_object['tags'],
                              variants: enabled_variants,
                              images: product_object['images'],
                              options: enabled_options,
                              visible: product_object['visible'],
                              default_image_url: default_image&.dig('src'),
                              printify_shop_id: product_object['shop_id'],
                              shop_id: shop.id,
                              categories: categories,
                              sub_categories: sub_categories
                            }
                            product.save!
                      
                            publish_response = HTTParty.post("https://api.printify.com/v1/shops/#{shop.properties['printify_shop_id']}/products/#{product_object['id']}/publishing_succeeded.json",
                              body: { external: { id: product.id.to_s, handle: "https://#{ENV['APP_HOST']}/product-details?id=#{product.id}" }}.to_json,
                              headers: printify_request_headers
                            )
                          
                            log_error(publish_response.body, { shop_id: shop.id, product: product_object['id'] }) unless publish_response.success?
                          end
                        end
                      end
                                      
                      def log_error(response, extra)
                        @logger_namespace.api_resources.create(properties: {
                          status: 'error',
                          timestamp: Time.zone.now,
                          response: response,
                          extra: extra,
                          source: 'sync_products'
                        })
                      end
                    end
                    
                    SyncPrintifyProducts
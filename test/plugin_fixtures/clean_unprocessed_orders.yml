clean_unprocessed_orders:
  api_namespace: order
  slug: clean_unprocessed_orders
  label: CleanUnprocessedOrders
  enabled: true
  drive_strategy: cron
  drive_every: one_day
  last_run_at: <%= (1.day + 5.minutes).ago %>
  metadata: {
              'LOGGER_NAMESPACE': 'order_cleanup_logs'
            }
  model_definition: |
    class CleanUnprocessedOrders
      def initialize(parameters)
        @external_api_client = parameters[:external_api_client]
        @logger_namespace = ApiNamespace.find_by(slug: @external_api_client.metadata["LOGGER_NAMESPACE"])

        @buffer_time = 1.hour
        @start_date_time = Time.zone.now.beginning_of_day - @buffer_time
        @end_date_time = Time.zone.now - @buffer_time
      end
      
      def start
        begin
          ApiResource.transaction do
            @logger = @logger_namespace.api_resources.create!(
              properties: {
                'source' => 'clean_unprocessed_orders',
                'start_time' => @start_date_time.to_s,
                'end_time' => @end_date_time.to_s
              }
            )

            orders_to_be_deleted = @external_api_client
                                    .api_namespace
                                    .api_resources
                                    .where(created_at: @start_date_time..@end_date_time)
                                    .jsonb_search(:properties, { printify_status: 'initialized' })
                                    .order(:created_at)
            initial_size = orders_to_be_deleted.size

            @logger.properties['before_cleanup_orders'] = orders_to_be_deleted.pluck(:id)
            @logger.properties['cleanup_status'] = 'initialized'
            @logger.save!

            orders_to_be_deleted.each do |orphan_order|
              orphan_order.destroy!
            end

            orders_to_be_deleted.reload
            final_size = orders_to_be_deleted.size

            if final_size.zero?
              @logger.properties['cleanup_status'] = 'completed'
            else
              @logger.properties['cleanup_status'] = 'partially_deleted'
              @logger.properties['after_cleanup_remaining_orders'] = orders_to_be_deleted.pluck(:id)
            end

            @logger.save!
          end
        rescue => e
          @logger.properties['cleanup_status'] = 'failed'
          @logger.properties['error_message'] = e.message
          @logger.properties['error_backtrace'] = e.backtrace.join("\n")
          @logger.save!
        end
      end
    end

    # at the end of the file we have to implicitly return the class 
    CleanUnprocessedOrders
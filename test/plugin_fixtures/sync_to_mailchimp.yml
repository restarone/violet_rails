mailchimp_plugin:
  api_namespace: mailchimp
  slug: mailchimp-plugin
  label: MailChimp
  enabled: true
  metadata: {
            'API_KEY': 'testkey',
            'SERVER_PREFIX': 'us9',
            'LIST_ID': 'valid_list_id',
          }
  model_definition: |
    class SyncToMailchimp
      def initialize(parameters)
        @external_api_client     = parameters[:external_api_client]
        @api_key                 = @external_api_client.metadata["API_KEY"]
        @unsynced_api_resources  = @external_api_client.api_namespace.api_resources.where("properties @> ?", {synced_to_mailchimp: false}.to_json)
        @mailchimp_uri           = "https://#{@external_api_client.metadata['SERVER_PREFIX']}.api.mailchimp.com/3.0/lists/#{@external_api_client.metadata['LIST_ID']}/members?skip_merge_validation=true"
        @custom_merge_fields_map = @external_api_client.metadata['CUSTOM_MERGE_FIELDS_MAP'] || {}
        @attr_to_exclude         = (@external_api_client.metadata['ATTR_TO_EXCLUDE'] || []) + @custom_merge_fields_map.keys + ['synced_to_mailchimp']
        @logger_namespace        = ApiNamespace.find_by(slug: @external_api_client.metadata["LOGGER_NAMESPACE"]) if @external_api_client.metadata["LOGGER_NAMESPACE"]
      end
      
      def start
        @unsynced_api_resources.each do |api_resource|
          begin
            merge_fields = api_resource.properties.except(*@attr_to_exclude).transform_keys(&:upcase).transform_values(&:to_s)

            @custom_merge_fields_map.each do |key, value|
              merge_fields[value.upcase] = api_resource.properties[key].to_s if value
            end

            response = HTTParty.post(@mailchimp_uri, 
              body: { 
                  email_address: api_resource.properties["email"],
                  status: "subscribed",
                  merge_fields: merge_fields,
                  tags: @external_api_client.metadata['TAGS'] || []
                }.to_json,

              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': "Basic #{@api_key}" 
                } 
              )

            if response.success?
              api_resource.properties["synced_to_mailchimp"] = true
              api_resource.save
            end

            @logger_namespace.api_resources.create!(
              properties: {
                api_resource: api_resource.id,
                status: response.success? ? "success" : "error",
                response: JSON.parse(response.body),
                timestamp: Time.zone.now
              }
            ) if @logger_namespace

          rescue StandardError => e
            @logger_namespace.api_resources.create!(
              properties: {
                api_resource: api_resource.id,
                status: "error",
                response: { detail: e.message},
                timestamp: Time.zone.now
              }
            ) if @logger_namespace
          end
        end
      end
    end

    # at the end of the file we have to implicitly return the class 
    SyncToMailchimp

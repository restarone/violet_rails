- action = @external_api_client.persisted? ? :put : :post
- path = @external_api_client.persisted? ? api_namespace_external_api_client_path(api_namespace_id: @external_api_client.api_namespace.id, id: @external_api_client.id) : api_namespace_external_api_clients_path(api_namespace_id: @api_namespace.id)

= form_for @external_api_client, url: path, method: action, html: {multipart: true} do |f|
  - if @external_api_client.errors.any?
    #error_explanation
      %h2= "#{pluralize(@external_api_client.errors.count, "error")} prohibited this api client from being saved:"
      %ul
        - @external_api_client.errors.full_messages.each do |message|
          %li= message

  .field
    = f.label :label
    = f.text_field :label
  .field
    = f.label :enabled
    = f.check_box :enabled
  .field
    = f.label :drive_strategy
    = f.select :drive_strategy, options_for_select(ExternalApiClient::DRIVE_STRATEGIES.keys, f.object.drive_strategy)

  -# conditionally render boilerplate model definition based on drive strategy
  - unless @external_api_client.persisted?
    = f.hidden_field  :default_webhook_driven_model_definition
    = f.hidden_field  :default_model_definition

  #webhook_verification_container
    .field
      = f.label :require_webhook_verification
      = f.check_box :require_webhook_verification, checked: @external_api_client.webhook_verification_method.persisted?

    .card.p-3#webhook_verification_method_container
      = f.fields_for :webhook_verification_method do |webhook_form|
        .field
          = webhook_form.label "Webhook verification method"
          = webhook_form.select :webhook_type, options_for_select(WebhookVerificationMethod.webhook_types, webhook_form.object&.webhook_type)
      
        .field
          = webhook_form.label :webhook_secret
          %small.text-muted
            (Secret shared between webhook server and reciever)
          %div 
            = webhook_form.text_area :webhook_secret, class: "w-100"

        .field#webhook_custom_method_definition
          = webhook_form.label :custom_method_definition
          %small.text-muted (must return an array containing verification status and message)
          %br
          %small.text-muted Accessable methods
          %br
          %small
            %li.text-muted request: Instance of ActionDispatch::Request
          %small
            %li.text-muted verification_method: Instance of WebhookVerificationMethod
          %small
            %li.text-muted Example: request.headers['Authorization'] == verification_method.webhook_secret ? [true, 'Success'] : [false, 'Invalid Token']
          %div= webhook_form.text_area :custom_method_definition, data: {'cms-cm-mode' => 'javascript'}, class: "w-100"

  .hide-if-webhook
    .field
      = f.label :drive_every
      = f.select :drive_every, options_for_select(ExternalApiClient::DRIVE_INTERVALS.keys, f.object.drive_every), include_blank: true

    .field
      = f.label :max_requests_per_minute
      = f.number_field :max_requests_per_minute
    .field
      = f.label :max_workers
      = f.number_field :max_workers
    .field
      = f.label :max_retries
      = f.number_field :max_retries

  .field.mb-3
    = f.label :model_definition
    %small
      %li.text-muted Define your interface and connection rules in a plain Ruby class (PORO)
    %small 
      %li.text-muted
        Wiki: 
        %a{href: "https://github.com/restarone/violet_rails/wiki/API:-Entities,-Form-Rendering,-Interfaces-and-Actions#automation-connecting-and-extracting-data-from-external-systemsapis", target: '_blank'} External API Connection
    %small
      %li.text-muted 
        Example: 
        %a{href: "https://github.com/restarone/violet_rails/blob/141e942461e016991b18697211d2f44e4569cb4e/test/fixtures/external_api_clients.yml#L35", target: '_blank'} External API Connection Model definition
    = f.text_area :model_definition, data: {'cms-cm-mode' => 'javascript'}

  #jsoneditor{data: { violet_jsoneditor: true, target: 'external_api_client_metadata' }}
  = hidden_field_tag "external_api_client[metadata]", @external_api_client.metadata&.to_json 

  .actions
    = f.submit 'Save'


= render 'comfy/admin/api_namespaces/init_editor', {read_only: false}

:javascript
  $(document).ready( function() {
    $('#external_api_client_drive_strategy').change(function(event) {
      if ($(this).val() === 'webhook') {
        $('#webhook_verification_container').show();
        $('.hide-if-webhook').hide();
      } else {
        $('#webhook_verification_container').hide();
        $('#external_api_client_require_webhook_verification').prop("checked", false);
        $('#webhook_verification_method_container').hide();
        $('.hide-if-webhook').show();
      }

      var codeMirror = $('#external_api_client_model_definition').next('.CodeMirror')[0].CodeMirror;
      var isPristine = (codeMirror.getValue() == $('#external_api_client_default_model_definition').val()) || (codeMirror.getValue() == $('#external_api_client_default_webhook_driven_model_definition').val())

      if ($('#new_external_api_client').length && isPristine) {
        if (($(this).val() === 'webhook')) {
          codeMirror.setValue($('#external_api_client_default_webhook_driven_model_definition').val())
        } else {
          codeMirror.setValue($('#external_api_client_default_model_definition').val())
        }
      }
    }).change();

    $('#external_api_client_webhook_verification_method_attributes_webhook_type').change(function(event) {
      if ($(this).val() === 'custom') {
        $('#webhook_custom_method_definition').show();
      } else {
        $('#webhook_custom_method_definition').hide();
      }

      if ($(this).val() === 'stripe') {
        $("label[for='external_api_client_webhook_verification_method_attributes_webhook_secret']").html('Webhook Signing Secret')
      } else {
        $("label[for='external_api_client_webhook_verification_method_attributes_webhook_secret']").html('Webhook Secret')
      }
    }).change();

    $('#external_api_client_require_webhook_verification').change(function(event) {
      if ($(this).is(':checked')) {
        $('#webhook_verification_method_container').show();
      } else {
        $('#webhook_verification_method_container').hide();
      }
    }).change();
  })
  


= form_for @api_namespace, html: {multipart: true} do |f|
  - if @api_namespace.errors.any?
    #error_explanation
      %h2= "#{pluralize(@api_namespace.errors.count, "error")} prohibited this api_namespace from being saved:"
      %ul
        - @api_namespace.errors.full_messages.each do |message|
          %li= message

  .field
    = f.label :name
    = f.text_field :name
  .field
    = f.label :version
    = f.number_field :version
  #jsoneditor{data: { violet_jsoneditor: true, target: 'api_namespace_properties' }}
  = hidden_field_tag "api_namespace[properties]", @api_namespace.properties&.to_json

  .non-primitve-properties.mb-4
    .h4.mt-3
      Non-primitive types:

    .form-group#non_primitive_forms
      = f.fields_for :non_primitive_properties, @api_namespace.non_primitive_properties do |ff|
        = render partial: 'comfy/admin/non_primitive_properties/nested_form', locals: {index: ff.index, resource: ff.object }
    %a.btn.btn-primary.text-white{onclick: "appendNonPrimitiveForm()"}
      %i.fa.fa-plus


  .associations.mb-4
    .h4.mt-3
      Associations
    
    .form-group#associations_forms
      - @api_namespace.associations.each_with_index do |association, index|
        = render partial: 'association_form', locals: { index: index, association: association }

    %a.btn.btn-primary.text-white{onclick: "appendAssociations()"}
      %i.fa.fa-plus

  .field
    = f.label :requires_authentication
    = f.check_box :requires_authentication
  .field
    = f.label "Renderable (Form, and representation)"
    = f.check_box :has_form, checked: @api_namespace.api_form.present?

  - unless has_only_uncategorized_access?(current_user.api_accessibility) 
    = render "comfy/admin/cms/categories/form", form: f

  .actions
    = f.submit 'Save'

:javascript
  function manageEvent(index) {
   var fieldType = $("#field_type_field_" + index).val();
   if (fieldType === 'file') {
     $("#file_field_" + index).show();
     $("#rich_text_field_" + index).hide();
     $("#rich_text_field_allow_attachments_" + index).hide();
   } else if (fieldType === 'richtext') {
     $("#file_field_" + index).hide();
     $("#rich_text_field_" + index).show();
     $("#rich_text_field_allow_attachments_" + index).show();
   }
  }

  function removeForm(form_id, destroy_field_id) {
    $("#" + form_id).hide();
    $("#" + destroy_field_id)?.val(true)
  }

  function appendNonPrimitiveForm() {
    var index = $("#non_primitive_forms > .form-container").length
    var url = "#{new_non_primitive_property_path()}" + `?index=${index}`
    $.ajax({
      url: url ,
      type: 'GET',
      dataType: 'script',
      contentType: "application/html",
      success: function(response) {}
    });
  }

  function appendAssociations() {
    var index = $("#associations_forms > .form-container").length
    $('#associations_forms').append("#{escape_javascript( render :partial => 'comfy/admin/api_namespaces/association_form', :locals => {index: 'index_to_replace', association: {} })}".replace(/index_to_replace/g, index))
  }

  function toggleDependent(el) {
    var dependentField = $(el).closest('.association_form_fields').find('.dependent-field').first();
    if($(el).val() == 'belongs_to') {
      dependentField.val('');
      dependentField.attr('disabled', true);
    } else {
      dependentField.attr('disabled', false);
    }
  }

  $(document).ready(function() {
    $('.association-type-field').change();
  })







